openapi: 3.0.0
info:
  version: 1.0.0
  title: Who Is King API document
  termsOfService: ''
  contact:
    name: T.S.

servers:
  - url: http://localhost:9090/api
    description: Local server
  - url: https://wik-dev.herokuapp.com/api
    description: DEV environment
  - url: https://wik-prd.herokuapp.com/api
    description: PRD environment

paths:
  "/noAuth/city":
    get:
      tags:
        - No auth
      description: List of all cities.
      responses:
        '200':
          description: Successful query.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/City'

        'default':
          $ref: '#/components/responses/GeneralError'
  "/noAuth/city/registrations":
    get:
      tags:
        - No auth
      description: List of registrations grouped by city.
      responses:
        '200':
          description: Successful query.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CityWithRegs'

        'default':
          $ref: '#/components/responses/GeneralError'

  "/auth/city":
    post:
      tags:
        - Auth
      security:
        - bearerAuth: []
      description: Set city of player.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                cityId:
                  type: string
                  format: uuid
      responses:
        '200':
          description: You get an empty 200 on successful save.
        'default':
          $ref: '#/components/responses/GeneralError'

  "/noAuth/nextGame":
    get:
      tags:
        - No auth
      description: Gets when the next gameState will be.
      responses:
        '200':
          description: Successful get.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Game'

        'default':
          $ref: '#/components/responses/GeneralError'

  "/noAuth/game/{gameId}":
    get:
      parameters:
        - $ref: '#/components/parameters/GameId'
      tags:
        - No auth
      description: Gets the question with the given uid, if openTime is over.
      responses:
        '200':
          description: Successful get
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Game'
        'default':
          $ref: '#/components/responses/GeneralError'
  "/auth/game":
    post:
      tags:
        - Auth
      security:
        - bearerAuth: []
      description: Adds a new question in the name of the user.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Game'
      responses:
        '200':
          description: Empty response on succesful creation
        'default':
          $ref: '#/components/responses/GeneralError'
    get:
      tags:
        - Games
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/AskedQuestion'
      description: Gets games, that have not been asked/scheduled, and asked by logged in user, timestamp DESC
      responses:
        '200':
          description: Games, filtered by user.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Game'

  "/auth/game/{gameId}/vote":
    post:
      parameters:
        - $ref: '#/components/parameters/GameId'
      tags:
        - Auth
      security:
        - bearerAuth: []
      description: Adds a new question in the name of the user.
      responses:
        '200':
          description: Empty response on succesful vote;
        'default':
          $ref: '#/components/responses/GeneralError'

  "/auth/game/{gameId}/solution":
    post:
      parameters:
        - $ref: '#/components/parameters/GameId'
      tags:
        - Auth
      security:
        - bearerAuth: []
      description: Sends the answer to the given question. Only accepted if sent before changeToGuessTime.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                answer:
                  type: string
                  format: uuid
      responses:
        '200':
          description: Empty response on success.
        'default':
          $ref: '#/components/responses/GeneralError'

  "/auth/game/{gameId}/guess":
    post:
      parameters:
        - $ref: '#/components/parameters/GameId'
      tags:
        - Auth
      security:
        - bearerAuth: []
      description: Sends the answer to the given question. Only accepted if sent after changeToGuessTime and closeTime.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                answer:
                  type: string
                  format: uuid
      responses:
        '200':
          description: Empty response on success.
          content:
            application/json:
              schema:
                type: object
                properties:
                  points:
                    type: number
                    minimum: 0
        'default':
          $ref: '#/components/responses/GeneralError'

  "/noAuth/game/{gameId}/result":
    get:
      parameters:
        - $ref: '#/components/parameters/GameId'
      tags:
        - No auth
      description: Get the result for the given question (after closeTime)
      responses:
        '200':
          description: Successful get
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResultAfterGame'
        'default':
          $ref: '#/components/responses/GeneralError'
  "/noAuth/game/result":
    get:
      parameters:
        - $ref: '#/components/parameters/DatePicker'
      tags:
        - No auth
      description: Get the aggregated results.
      responses:
        '200':
          description: Successful get
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Statistics'
        'default':
          $ref: '#/components/responses/GeneralError'

  "/auth/user/me":
    get:
      tags:
        - Auth
      security:
        - bearerAuth: []
      description: Gets backend info for user.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        'default':
          $ref: '#/components/responses/GeneralError'

    delete:
      tags:
        - Auth
      security:
        - bearerAuth: []
      description: Removes all data related to user.
      responses:
        '200':
          description: Empty response on successful post.
        'default':
          $ref: '#/components/responses/GeneralError'
  "/noAuth/level":
    get:
      tags:
        - No auth
      description: Gets available levels.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Level'
        'default':
          $ref: '#/components/responses/GeneralError'
  "/noAuth/game":
    get:
      tags:
        - Games
      parameters:
        - $ref: '#/components/parameters/AskedQuestion'
      description: Gets games, that have not been asked/scheduled, vote DESC
      responses:
        '200':
          description: Games, filtered by user who asked if given as a param
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Game'



components:
  responses:
    GeneralError:
      description: All backend errors come this way.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

  parameters:
    GameId:
      in: path
      name: gameId
      schema:
        type: string
        format: uuid
      required: true
    AskedQuestion:
      in: query
      name: askedQuestion
      schema:
        type: boolean
        default: false
      required: false
    DatePicker:
      in: query
      name: datePicker
      schema:
        type: string
        enum:
          - 1D
          - 1W
          - 1M
          - ALL
        default: ALL
      required: false

  schemas:
    Error:
      type: object
      properties:
        errorCode:
          type: string
        message:
          type: string
        httpStatus:
          type: number
      required:
        - errorCode
        - message

    Level:
      type: object
      properties:
        index:
          type: number
        points:
          type: number
        plusVotes:
          type: number
        plusQuestions:
          type: number
        other:
          type: array
          items:
            type: string
      required:
        - index
        - points
        - plusVotes
        - plusQuestions

    User:
      type: object
      properties:
        cityName:
          type: string
        nickName:
          type: string
        votes:
          type: number
          minimum: 0
        questions:
          type: number
          minimum: 0
        points:
          type: number
          minimum: 0
        currentLevel:
          type: number
          minimum: 0
        highestLevel:
          type: number
          minimum: 0
      required:
        - votes
        - questions
        - points
        - highestLevel

    City:
      type: object
      properties:
        name:
          type: string
          maxLength: 300
          example: "Veszprém"
        uid:
          type: string
          format: uuid
        zip:
          type: string
          maxLength: 10
          example: "8200"
        lat:
          type: number
        lng:
          type: number
      required:
        - name
        - zip

    CityWithRegs:
      type: object
      properties:
        city:
          $ref: '#/components/schemas/City'
        registrations:
          type: number
          minimum: 0

    ResultAfterGame:
      type: object
      properties:
        gameResult:
          $ref: '#/components/schemas/GameResult'
        cityResult:
          type: array
          items:
            $ref: '#/components/schemas/CityResult'
      required:
        - gameResult
        - cityResult

    Statistics:
      type: object
      properties:
        cityResult:
          type: array
          items:
            $ref: '#/components/schemas/CityResult'
        userResult:
          type: array
          items:
            $ref: '#/components/schemas/UserResult'
      required:
        - cityResult
        - userResult

    GameResult:
      type: object
      properties:
        answers:
          type: array
          items:
            type: object
            properties:
              ratio:
                type: number
                minimum: 0
              uid:
                type: string
                format: uuid
              answer:
                type: string
            required:
              - ratio
              - uid
              - answer

    UserResult:
      type: object
      properties:
        nickName:
          type:
            string
        points:
          type: number
          minimum: 0
      required:
        - nickName
        - points

    CityResult:
      type: object
      properties:
        city:
          $ref: '#/components/schemas/City'
        avgPoint:
          type: number
          minimum: 0
        allResponders:
          type: number
          minimum: 0
      required:
        - city
        - avgPoint
        - allResponders

    Game:
      type: object
      properties:
        uid:
          type: string
          format: uuid
        question:
          type: string
        answers:
          type: array
          items:
            type: object
            properties:
              answer:
                type: string
              uid:
                type: string
                format: uuid
        votes:
          type: number
          minimum: 0
        openTime:
          type: string
          format: date-time
        closeTime:
          type: string
          format: date-time
        changeToGuessTime:
          type: string
          format: date-time
        currentTime:
          type: string
          format: date-time
        category:
          type: string
      additionalProperties: false

  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
