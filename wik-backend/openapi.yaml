openapi: 3.0.0
info:
  version: 1.0.0
  title: Who Is King API document
  termsOfService: ''
  contact:
    name: T.S.

servers:
  - url: http://localhost:9090/api
    description: Local server
  - url: https://wik-dev.herokuapp.com/api
    description: DEV environment
  - url: https://wik-prd.herokuapp.com/api
    description: PRD environment

paths:
  "/city":
    get:
      tags:
        - No auth
      description: List of all cities.
      responses:
        '200':
          description: Successful query.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/City'

        'default':
          $ref: '#/components/responses/GeneralError'
  "/city/registrations":
    get:
      tags:
        - No auth
      description: List of registrations grouped by city.
      responses:
        '200':
          description: Successful query.
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    city:
                      $ref: '#/components/schemas/City'
                    registrations:
                      type: number
                      minimum: 0

        'default':
          $ref: '#/components/responses/GeneralError'

    post:
      tags:
        - Auth
      security:
        - bearerAuth: []
      description: Set city of player.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/City'
      responses:
        '200':
          description: You get an empty 200 on successful save.
        'default':
          $ref: '#/components/responses/GeneralError'

  "/nextGame":
    get:
      tags:
        - No auth
      description: Gets when the next game will be.
      responses:
        '200':
          description: Successful get.
          content:
            application/json:
              schema:
                type: object
                properties:
                  uid:
                    type: string
                    format: uuid
                  openTime:
                    type: string
                    format: date
                  closeTime:
                    type: string
                    format: date
        'default':
          $ref: '#/components/responses/GeneralError'

  "/game/{gameId}":
    get:
      parameters:
        - $ref: '#/components/parameters/GameId'
      tags:
        - No auth
      description: Gets the question with the given uid, if openTime is over.
      responses:
        '200':
          description: Successful get
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Game'
        'default':
          $ref: '#/components/responses/GeneralError'
    post:
      parameters:
        - $ref: '#/components/parameters/GameId'
      tags:
        - Auth
      security:
        - bearerAuth: []
      description: Sends the answer to the given question. Only accepted if sent before closeTime.
      requestBody:
        content:
          application/json:
            schema:
              type: string
      responses:
        '200':
          description: Empty response on successful post.
        'default':
          $ref: '#/components/responses/GeneralError'

  "/game/{gameId}/result":
    get:
      parameters:
        - $ref: '#/components/parameters/GameId'
      tags:
        - No auth
      description: Get the result for the given question (after closeTime)
      responses:
        '200':
          description: Successful get
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/GameResult'
        'default':
          $ref: '#/components/responses/GeneralError'
  "/game/result":
    get:
      parameters:
        - $ref: '#/components/parameters/Interval'
      tags:
        - No auth
      description: Get the aggregated results.
      responses:
        '200':
          description: Successful get
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/GameResult'
        'default':
          $ref: '#/components/responses/GeneralError'

  "/user/me":
    delete:
      tags:
        - Auth
      security:
        - bearerAuth: []
      description: Removes all data related to user.
      responses:
        '200':
          description: Empty response on successful post.
        'default':
          $ref: '#/components/responses/GeneralError'

components:
  responses:
    GeneralError:
      description: All backend errors come this way.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

  parameters:
    GameId:
      in: path
      name: gameId
      schema:
        type: string
        format: uuid
      required: true
    Interval:
      in: query
      name: interval
      schema:
        type: string
        enum: ["1D", "1W", "1M", "ALL"]
        default: "ALL"

  schemas:
    Error:
      type: object
      properties:
        errorCode:
          type: string
        message:
          type: string
        httpStatus:
          type: number
      required:
        - errorCode
        - message
    City:
      type: object
      properties:
        name:
          type: string
          maxLength: 300
          example: "Veszpr√©m"
        uid:
          type: string
          format: uuid
        zip:
          type: string
          maxLength: 10
          example: "8200"
      required:
        - name
        - zip
    GameResult:
      type: object
      properties:
        city:
          $ref: '#/components/schemas/City'
        avgPoint:
          type: number
          minimum: 0
        allResponders:
          type: number
          minimum: 0
    Game:
      type: object
      properties:
        uid:
          type: string
          format: uuid
        question:
          type: string
        questionType:
          type: string
        options:
          type: string
          format: json

  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
